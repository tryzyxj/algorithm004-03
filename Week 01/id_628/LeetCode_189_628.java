//给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。 
//
// 示例 1: 
//
// 输入: [1,2,3,4,5,6,7] 和 k = 3
//输出: [5,6,7,1,2,3,4]
//解释:
//向右旋转 1 步: [7,1,2,3,4,5,6]
//向右旋转 2 步: [6,7,1,2,3,4,5]
//向右旋转 3 步: [5,6,7,1,2,3,4]
// 
//
// 示例 2: 
//
// 输入: [-1,-100,3,99] 和 k = 2
//输出: [3,99,-1,-100]
//解释: 
//向右旋转 1 步: [99,-1,-100,3]
//向右旋转 2 步: [3,99,-1,-100] 
//
// 说明: 
//
// 
// 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。 
// 要求使用空间复杂度为 O(1) 的 原地 算法。 
// 
// Related Topics 数组



//leetcode submit region begin(Prohibit modification and deletion)
class LeetCode_189_628 {
    public void rotate(int[] nums, int k) {
        if(nums == null || nums.length == 0)return;
        int m = k % nums.length;
        reverse(nums , 0 , nums.length-1 );
        reverse(nums , 0 , m-1 );
        reverse(nums , m , nums.length - 1);
    }

    public void reverse(int[] nums, int start, int end){
        while(start < end) {
            int tmp = nums[start];
            nums[start] = nums[end];
            nums[end] = tmp;
            start ++ ;
            end --;
        }
    }
}
//leetcode submit region end(Prohibit modification and deletion)
/*
    1、暴力法
    双层循环，一位一位挪移，用一个替换位实现
    2、穿针引线
    利用数列无限延展后，对k的第一轮同余不会有重复的情况，挪移，需要一个变量
    3、反转数组
    整个数组反转后，再反转前k个（0~k-1），和k到末尾（k~len-1），可以实现
 */
