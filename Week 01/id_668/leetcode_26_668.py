#!/usr/bin/env python
# -*- coding:utf-8 -*-

"""
    @file: remove_duplicate.py
    @time: 2019/10/16 19:53
"""


class Solution(object):
    """
        给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
        不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

        示例 1:
        给定数组 nums = [1,1,2],
        函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
        你不需要考虑数组中超出新长度后面的元素。

        示例 2:
        给定 nums = [0,0,1,1,1,2,2,3,3,4],
        函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
        你不需要考虑数组中超出新长度后面的元素。
    """

    def remove_duplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int

        思考：应该是学习到了超哥课堂上讲到的关于数组解题的双指针技巧，题目要求使用O(1)的额外空间，所以首先尝试了
        双指针的解题方法。首先这是个有序数组，两个指针，指针j用于正常遍历数组，指针i标示当前没有重复区域的最后一个元素，
        当遍历中遇到j位置元素与i位置元素不相等时，这个时候i向后移动一位，然后将j位置的元素赋值到i位置，
        赋值完之后i位置元素依然是非重复区域的最后一个元素。类似的操作直到数组遍历结束。i位置元素始终是非重复区域
        的最后一个元素的关键是数组是有序的，所以在往下的遍历中，不会遇到j位置与i位置之前的元素相等的情况。
        时间复杂度：O(n)
        空间复杂度：O(1)
        """
        i, j = 0, 0

        for j in range(len(nums)):
            if nums[i] != nums[j]:
                i += 1
                nums[i] = nums[j]

        return i + 1

