class Solution {    public int[] twoSum(int[] nums, int target) {        Map<Integer, Integer> map = new HashMap<>();        for (int i = 0; i < nums.length; i++) {            int complement = (target - nums[i]);            System.out.println("complement:" + complement + " i:" + i + " nums:" + nums[i]);            if (map.containsKey(complement)) {                return new int[]{map.get(complement), i};            }            //如果条件是最先的俩个数累加需加上该判断，否则不需要            if (map.containsKey(nums[i])) {                continue;            }            map.put(nums[i], i);        }        throw new IllegalArgumentException("No two sum solution");    }    public static void main(String[] args) {        Solution solution = new Solution();        //给定 nums = [2, 7, 11, 15], target = 9        //因为 nums[0] + nums[1] = 2 + 7 = 9        //所以返回 [0, 1]        int[] nums = new int[]{10, 3, 3, 7, 6, 11, 15};        int target = 9;        int[] ns = new int[2];        ns = solution.twoSum(nums, target);        for (int i : ns) {            System.out.println(i);        }    }}